<program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  20  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  10  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  2  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  3  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  2  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  srand  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  time  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  firstblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <routineCall>
                    <IDENTIFIER>  rand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
              </term>
              <SYMBOL>  %  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
              <SYMBOL>  +  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  block  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  nextblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  gamejudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  roundcount  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  count  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  show  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                <SYMBOL>  !  </SYMBOL>                
                <term>
                  <routineCall>
                      <IDENTIFIER>  kbhit  </IDENTIFIER>                      
                    <SYMBOL>  (  </SYMBOL>                    
                    <expressionList>
                    </expressionList>
                    <SYMBOL>  )  </SYMBOL>                    
                  </routineCall>
                </term>
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  step  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  getch  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'a'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  amovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                <INT_CONST>  10  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                <SYMBOL>  ++  </SYMBOL>                                
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'd'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  dmovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  8  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  's'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  smovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  9  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'j'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  jturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'k'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  kturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'l'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  current  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  system  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "cls"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "  "  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                    <RESERVED_WORD>  else  </RESERVED_WORD>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "█"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Round"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  roundcount  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Next Block"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "              █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ████"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  ""  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Score"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  8  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  score  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏操作"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  11  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          A左移，D右移，S加速下降，J左转，K右转，L直降"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  12  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏愉快"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  14  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Made By 陆海天"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "----------------------"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  roundcount  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  firstblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
                <RESERVED_WORD>  else  </RESERVED_WORD>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  losecheck  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  roundcount  </IDENTIFIER>                  
                <SYMBOL>  ++  </SYMBOL>                
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  srand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <routineCall>
                            <IDENTIFIER>  time  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  nextblock  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  rand  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                  <SYMBOL>  %  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                  <SYMBOL>  +  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  6  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  10  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  del  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dropjudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  round  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  18  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dropjudge  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                          <SYMBOL>  ||  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  l  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  4  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  5  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  6  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  7  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  8  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  score  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                        <INT_CONST>  100  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  k  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  l  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  amovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dmovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  amovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  amovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  8  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dmovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dmovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  turncheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  temp  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  temp  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  min  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  currentflag  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  10  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  currentflag  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &gt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  20  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                            <SYMBOL>  ++  </SYMBOL>                            
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  currentflag  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  &gt;  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  k  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  currentflag  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  5  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  6  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  gamejudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  system  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "cls"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "                            Game Over\n\n                             Score:%d\n\n                   输入0结束游戏，输入1重新开始\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  scanf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "%d"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                        <SYMBOL>  &amp;  </SYMBOL>                        
                        <term>
                            <IDENTIFIER>  conti  </IDENTIFIER>                            
                        </term>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  exit  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  system  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "cls"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  main  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
</program><program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  20  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  10  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  3  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
<program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  20  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  10  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  3  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
<program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  20  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  10  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  3  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  srand  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  time  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  firstblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <routineCall>
                    <IDENTIFIER>  rand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
              </term>
              <SYMBOL>  %  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
              <SYMBOL>  +  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  block  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  nextblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  gamejudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  roundcount  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  count  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  show  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                <SYMBOL>  !  </SYMBOL>                
                <term>
                  <routineCall>
                      <IDENTIFIER>  kbhit  </IDENTIFIER>                      
                    <SYMBOL>  (  </SYMBOL>                    
                    <expressionList>
                    </expressionList>
                    <SYMBOL>  )  </SYMBOL>                    
                  </routineCall>
                </term>
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  step  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  getch  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'a'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  amovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                <INT_CONST>  10  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                <SYMBOL>  ++  </SYMBOL>                                
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'd'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  dmovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  8  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  's'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  smovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  9  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'j'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  jturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'k'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  kturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'l'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  current  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  system  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "cls"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "  "  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                    <RESERVED_WORD>  else  </RESERVED_WORD>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "█"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Round"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  roundcount  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Next Block"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "              █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ████"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  ""  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Score"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  8  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  score  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏操作"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  11  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          A左移，D右移，S加速下降，J左转，K右转，L直降"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  12  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏愉快"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  14  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Made By 陆海天"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "----------------------"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  roundcount  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  firstblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
                <RESERVED_WORD>  else  </RESERVED_WORD>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  losecheck  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  roundcount  </IDENTIFIER>                  
                <SYMBOL>  ++  </SYMBOL>                
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  srand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <routineCall>
                            <IDENTIFIER>  time  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  nextblock  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  rand  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                  <SYMBOL>  %  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                  <SYMBOL>  +  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  6  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  10  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  del  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dropjudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  round  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  18  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dropjudge  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                          <SYMBOL>  ||  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  l  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  4  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  5  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  6  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  7  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  8  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  score  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                        <INT_CONST>  100  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  k  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  l  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  amovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dmovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  amovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  amovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  8  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dmovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dmovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  turncheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  temp  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  temp  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  min  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  currentflag  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  10  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  currentflag  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &gt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  20  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                            <SYMBOL>  ++  </SYMBOL>                            
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  currentflag  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  &gt;  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  k  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  currentflag  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  5  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  6  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  gamejudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  system  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "cls"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "                            Game Over\n\n                             Score:%d\n\n                   输入0结束游戏，输入1重新开始\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  scanf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "%d"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                        <SYMBOL>  &amp;  </SYMBOL>                        
                        <term>
                            <IDENTIFIER>  conti  </IDENTIFIER>                            
                        </term>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  exit  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  system  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "cls"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  main  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
</program><program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  20  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  10  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  3  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  srand  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  time  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  firstblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <routineCall>
                    <IDENTIFIER>  rand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
              </term>
              <SYMBOL>  %  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
              <SYMBOL>  +  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  block  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  nextblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  gamejudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  roundcount  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  count  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  show  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                <SYMBOL>  !  </SYMBOL>                
                <term>
                  <routineCall>
                      <IDENTIFIER>  kbhit  </IDENTIFIER>                      
                    <SYMBOL>  (  </SYMBOL>                    
                    <expressionList>
                    </expressionList>
                    <SYMBOL>  )  </SYMBOL>                    
                  </routineCall>
                </term>
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  step  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  getch  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'a'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  amovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                <INT_CONST>  10  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                <SYMBOL>  ++  </SYMBOL>                                
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'd'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  dmovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  8  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  's'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  smovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  9  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'j'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  jturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'k'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  kturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'l'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  current  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  system  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "cls"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "  "  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                    <RESERVED_WORD>  else  </RESERVED_WORD>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "█"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Round"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  roundcount  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Next Block"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "              █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ████"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  ""  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Score"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  8  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  score  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏操作"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  11  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          A左移，D右移，S加速下降，J左转，K右转，L直降"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  12  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏愉快"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  14  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Made By 陆海天"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "----------------------"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  roundcount  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  firstblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
                <RESERVED_WORD>  else  </RESERVED_WORD>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  losecheck  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  roundcount  </IDENTIFIER>                  
                <SYMBOL>  ++  </SYMBOL>                
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  srand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <routineCall>
                            <IDENTIFIER>  time  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  nextblock  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  rand  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                  <SYMBOL>  %  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                  <SYMBOL>  +  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  6  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  10  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  del  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dropjudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  round  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  18  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dropjudge  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                          <SYMBOL>  ||  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  l  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  4  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  5  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  6  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  7  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  8  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  score  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                        <INT_CONST>  100  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  k  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  l  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  amovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dmovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  amovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  amovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  8  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dmovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dmovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  turncheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  temp  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  temp  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  min  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  currentflag  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  10  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  currentflag  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &gt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  20  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                            <SYMBOL>  ++  </SYMBOL>                            
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  currentflag  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  &gt;  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  k  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  currentflag  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  5  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  6  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  gamejudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  system  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "cls"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "                            Game Over\n\n                             Score:%d\n\n                   输入0结束游戏，输入1重新开始\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  scanf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "%d"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                        <SYMBOL>  &amp;  </SYMBOL>                        
                        <term>
                            <IDENTIFIER>  conti  </IDENTIFIER>                            
                        </term>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  exit  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  system  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "cls"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  main  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
</program><program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  20  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  10  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  3  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  srand  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  time  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  firstblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <routineCall>
                    <IDENTIFIER>  rand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
              </term>
              <SYMBOL>  %  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
              <SYMBOL>  +  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  block  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  nextblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  gamejudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  roundcount  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  count  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  show  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                <SYMBOL>  !  </SYMBOL>                
                <term>
                  <routineCall>
                      <IDENTIFIER>  kbhit  </IDENTIFIER>                      
                    <SYMBOL>  (  </SYMBOL>                    
                    <expressionList>
                    </expressionList>
                    <SYMBOL>  )  </SYMBOL>                    
                  </routineCall>
                </term>
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  step  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  getch  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'a'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  amovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                <INT_CONST>  10  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                <SYMBOL>  ++  </SYMBOL>                                
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'd'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  dmovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  8  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  's'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  smovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  9  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'j'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  jturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'k'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  kturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'l'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  current  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  system  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "cls"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "  "  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                    <RESERVED_WORD>  else  </RESERVED_WORD>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "█"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Round"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  roundcount  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Next Block"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "              █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ████"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  ""  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Score"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  8  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  score  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏操作"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  11  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          A左移，D右移，S加速下降，J左转，K右转，L直降"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  12  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏愉快"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  14  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Made By 陆海天"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "----------------------"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  roundcount  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  firstblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
                <RESERVED_WORD>  else  </RESERVED_WORD>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  losecheck  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  roundcount  </IDENTIFIER>                  
                <SYMBOL>  ++  </SYMBOL>                
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  srand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <routineCall>
                            <IDENTIFIER>  time  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  nextblock  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  rand  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                  <SYMBOL>  %  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                  <SYMBOL>  +  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  6  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  10  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  del  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dropjudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  round  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  18  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dropjudge  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                          <SYMBOL>  ||  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  l  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  4  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  5  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  6  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  7  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  8  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  score  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                        <INT_CONST>  100  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  k  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  l  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  amovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dmovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  amovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  amovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  8  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dmovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dmovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  turncheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  temp  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  temp  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  min  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  currentflag  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  10  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  currentflag  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &gt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  20  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                            <SYMBOL>  ++  </SYMBOL>                            
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  currentflag  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  &gt;  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  k  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  currentflag  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  5  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  6  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  gamejudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  system  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "cls"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "                            Game Over\n\n                             Score:%d\n\n                   输入0结束游戏，输入1重新开始\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  scanf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "%d"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                        <SYMBOL>  &amp;  </SYMBOL>                        
                        <term>
                            <IDENTIFIER>  conti  </IDENTIFIER>                            
                        </term>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  exit  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  system  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "cls"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  main  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
</program><program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  20  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  10  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  3  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
  <program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  20  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  10  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  3  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <expression>
        <term>
          <INT_CONST>  2  </INT_CONST>          
        </term>
      </expression>
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  srand  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  time  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  firstblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <routineCall>
                    <IDENTIFIER>  rand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
              </term>
              <SYMBOL>  %  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
              <SYMBOL>  +  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  block  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  nextblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  gamejudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  roundcount  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  count  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  show  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                <SYMBOL>  !  </SYMBOL>                
                <term>
                  <routineCall>
                      <IDENTIFIER>  kbhit  </IDENTIFIER>                      
                    <SYMBOL>  (  </SYMBOL>                    
                    <expressionList>
                    </expressionList>
                    <SYMBOL>  )  </SYMBOL>                    
                  </routineCall>
                </term>
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  step  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  getch  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'a'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  amovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                <INT_CONST>  10  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                <SYMBOL>  ++  </SYMBOL>                                
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'd'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  dmovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  8  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  's'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  smovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  9  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'j'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  jturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'k'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  kturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'l'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  current  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  system  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "cls"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "  "  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                    <RESERVED_WORD>  else  </RESERVED_WORD>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "█"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Round"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  roundcount  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Next Block"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "              █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ████"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  ""  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Score"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  8  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  score  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏操作"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  11  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          A左移，D右移，S加速下降，J左转，K右转，L直降"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  12  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏愉快"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  14  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Made By 陆海天"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "----------------------"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  roundcount  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  firstblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
                <RESERVED_WORD>  else  </RESERVED_WORD>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  losecheck  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  roundcount  </IDENTIFIER>                  
                <SYMBOL>  ++  </SYMBOL>                
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  srand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <routineCall>
                            <IDENTIFIER>  time  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  nextblock  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  rand  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                  <SYMBOL>  %  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                  <SYMBOL>  +  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  6  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  10  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  del  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dropjudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  round  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  18  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dropjudge  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                          <SYMBOL>  ||  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  l  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  4  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  5  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  6  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  7  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  8  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  score  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                        <INT_CONST>  100  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  k  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  l  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  amovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dmovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  amovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  amovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  8  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dmovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dmovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  turncheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  temp  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  temp  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  min  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  currentflag  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  10  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  currentflag  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &gt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  20  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                            <SYMBOL>  ++  </SYMBOL>                            
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  currentflag  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  &gt;  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  k  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  currentflag  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  5  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  6  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  gamejudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  system  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "cls"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "                            Game Over\n\n                             Score:%d\n\n                   输入0结束游戏，输入1重新开始\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  scanf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "%d"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                        <SYMBOL>  &amp;  </SYMBOL>                        
                        <term>
                            <IDENTIFIER>  conti  </IDENTIFIER>                            
                        </term>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  exit  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  system  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "cls"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  main  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
</program><program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  20  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  10  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  2  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  3  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  2  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  srand  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  time  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  firstblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <routineCall>
                    <IDENTIFIER>  rand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
              </term>
              <SYMBOL>  %  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
              <SYMBOL>  +  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  block  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  nextblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  gamejudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  roundcount  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  count  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  show  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                <SYMBOL>  !  </SYMBOL>                
                <term>
                  <routineCall>
                      <IDENTIFIER>  kbhit  </IDENTIFIER>                      
                    <SYMBOL>  (  </SYMBOL>                    
                    <expressionList>
                    </expressionList>
                    <SYMBOL>  )  </SYMBOL>                    
                  </routineCall>
                </term>
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  step  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  getch  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'a'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  amovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                <INT_CONST>  10  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                <SYMBOL>  ++  </SYMBOL>                                
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'd'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  dmovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  8  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  's'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  smovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  9  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'j'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  jturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'k'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  kturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'l'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  current  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  system  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "cls"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "  "  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                    <RESERVED_WORD>  else  </RESERVED_WORD>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "█"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Round"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  roundcount  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Next Block"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "              █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ████"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  ""  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Score"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  8  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  score  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏操作"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  11  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          A左移，D右移，S加速下降，J左转，K右转，L直降"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  12  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏愉快"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  14  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Made By 陆海天"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "----------------------"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  roundcount  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  firstblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
                <RESERVED_WORD>  else  </RESERVED_WORD>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  losecheck  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  roundcount  </IDENTIFIER>                  
                <SYMBOL>  ++  </SYMBOL>                
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  srand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <routineCall>
                            <IDENTIFIER>  time  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  nextblock  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  rand  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                  <SYMBOL>  %  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                  <SYMBOL>  +  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  6  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  10  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  del  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dropjudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  round  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  18  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dropjudge  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                          <SYMBOL>  ||  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  l  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  4  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  5  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  6  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  7  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  8  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  score  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                        <INT_CONST>  100  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  k  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  l  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  amovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dmovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  amovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  amovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  8  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dmovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dmovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  turncheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  temp  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  temp  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  min  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  currentflag  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  10  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  currentflag  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &gt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  20  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                            <SYMBOL>  ++  </SYMBOL>                            
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  currentflag  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  &gt;  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  k  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  currentflag  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  5  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  6  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  gamejudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  system  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "cls"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "                            Game Over\n\n                             Score:%d\n\n                   输入0结束游戏，输入1重新开始\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  scanf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "%d"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                        <SYMBOL>  &amp;  </SYMBOL>                        
                        <term>
                            <IDENTIFIER>  conti  </IDENTIFIER>                            
                        </term>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  exit  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  system  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "cls"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  main  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
</program><program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  20  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  10  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  2  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  3  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  2  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  srand  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  time  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  firstblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <routineCall>
                    <IDENTIFIER>  rand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
              </term>
              <SYMBOL>  %  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
              <SYMBOL>  +  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  block  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  nextblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  gamejudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  roundcount  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  count  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  show  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                <SYMBOL>  !  </SYMBOL>                
                <term>
                  <routineCall>
                      <IDENTIFIER>  kbhit  </IDENTIFIER>                      
                    <SYMBOL>  (  </SYMBOL>                    
                    <expressionList>
                    </expressionList>
                    <SYMBOL>  )  </SYMBOL>                    
                  </routineCall>
                </term>
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  step  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  getch  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'a'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  amovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                <INT_CONST>  10  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                <SYMBOL>  ++  </SYMBOL>                                
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'd'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  dmovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  8  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  's'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  smovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  9  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'j'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  jturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'k'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  kturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'l'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  current  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  system  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "cls"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "  "  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                    <RESERVED_WORD>  else  </RESERVED_WORD>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "█"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Round"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  roundcount  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Next Block"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "              █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ████"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  ""  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Score"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  8  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  score  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏操作"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  11  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          A左移，D右移，S加速下降，J左转，K右转，L直降"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  12  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏愉快"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  14  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Made By 陆海天"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "----------------------"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  roundcount  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  firstblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
                <RESERVED_WORD>  else  </RESERVED_WORD>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  losecheck  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  roundcount  </IDENTIFIER>                  
                <SYMBOL>  ++  </SYMBOL>                
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  srand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <routineCall>
                            <IDENTIFIER>  time  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  nextblock  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  rand  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                  <SYMBOL>  %  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                  <SYMBOL>  +  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  6  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  10  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  del  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dropjudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  round  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  18  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dropjudge  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                          <SYMBOL>  ||  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  l  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  4  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  5  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  6  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  7  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  8  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  score  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                        <INT_CONST>  100  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  k  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  l  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  amovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dmovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  amovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  amovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  8  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dmovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dmovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  turncheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  temp  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  temp  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  min  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  currentflag  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  10  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  currentflag  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &gt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  20  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                            <SYMBOL>  ++  </SYMBOL>                            
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  currentflag  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  &gt;  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  k  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  currentflag  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  5  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  6  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  gamejudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  system  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "cls"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "                            Game Over\n\n                             Score:%d\n\n                   输入0结束游戏，输入1重新开始\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  scanf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "%d"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                        <SYMBOL>  &amp;  </SYMBOL>                        
                        <term>
                            <IDENTIFIER>  conti  </IDENTIFIER>                            
                        </term>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  exit  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  system  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "cls"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  main  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
</program><program>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  char  </RESERVED_WORD>      
      <IDENTIFIER>  step  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  amovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dmovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  smovecheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  count  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  roundcount  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  score  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mode  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  modetime  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  board  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  20  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  10  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  gamejudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  firstblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  block  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  nextblock  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  dropjudge  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  o  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  2  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  point  </IDENTIFIER>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  3  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  [  </SYMBOL>      
      <INT_CONST>  2  </INT_CONST>      
      <SYMBOL>  ]  </SYMBOL>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  turncheck  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  temp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  min  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  mintemp  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  currentflag  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <variableDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  conti  </IDENTIFIER>      
      <SYMBOL>  ;  </SYMBOL>      
    </variableDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  int  </RESERVED_WORD>      
      <IDENTIFIER>  main  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  initialization  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  1000  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  round  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <returnStatement>
            <RESERVED_WORD>  return  </RESERVED_WORD>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </returnStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  initialization  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "俄罗斯方块\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "请输入游戏难度\n1 简单   2 普通   3困难   4地狱\n"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scanf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "%d"  </STRING_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ,  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  &amp;  </SYMBOL>                    
                    <term>
                        <IDENTIFIER>  mode  </IDENTIFIER>                        
                    </term>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  100  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  60  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  mode  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  modetime  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  srand  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  time  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  firstblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <routineCall>
                    <IDENTIFIER>  rand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
              </term>
              <SYMBOL>  %  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
              <SYMBOL>  +  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  block  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  nextblock  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  gamejudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  roundcount  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  count  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  show  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  control  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  Sleep  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                <SYMBOL>  !  </SYMBOL>                
                <term>
                  <routineCall>
                      <IDENTIFIER>  kbhit  </IDENTIFIER>                      
                    <SYMBOL>  (  </SYMBOL>                    
                    <expressionList>
                    </expressionList>
                    <SYMBOL>  )  </SYMBOL>                    
                  </routineCall>
                </term>
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  step  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  getch  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'a'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  amovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                <INT_CONST>  10  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                <SYMBOL>  ++  </SYMBOL>                                
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'd'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  dmovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  8  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  's'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  smovecheck  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  smovecheck  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <forStatement>
                            <RESERVED_WORD>  for  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  9  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &lt;  </SYMBOL>                              
                              <term>
                                <SYMBOL>  -  </SYMBOL>                                
                                <term>
                                  <INT_CONST>  1  </INT_CONST>                                  
                                </term>
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                                <SYMBOL>  --  </SYMBOL>                                
                                <SYMBOL>  )  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  2  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  2  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                  </term>
                                  <SYMBOL>  ==  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  3  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  +  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  3  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  board  </IDENTIFIER>                                      
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  [  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  j  </IDENTIFIER>                                          
                                      </term>
                                    </expression>
                                    <SYMBOL>  ]  </SYMBOL>                                    
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                        <INT_CONST>  0  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </forStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'j'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  jturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'k'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  kturn  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  step  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <CHAR_CONST>  'l'  </CHAR_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  current  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  show  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  system  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "cls"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "  "  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                    <RESERVED_WORD>  else  </RESERVED_WORD>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "█"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "|"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Round"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  roundcount  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Next Block"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "              █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ████"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            █"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "            ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ██"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  ""  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  printf  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <STRING_CONST>  "          ███"  </STRING_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Score"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  8  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          %d"  </STRING_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ,  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  score  </IDENTIFIER>                              
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏操作"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  11  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          A左移，D右移，S加速下降，J左转，K右转，L直降"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  12  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          游戏愉快"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  14  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  printf  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "          Made By 陆海天"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  printf  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
                <expression>
                  <term>
                    <STRING_CONST>  "----------------------"  </STRING_CONST>                    
                  </term>
                </expression>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  round  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  roundcount  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  firstblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
                <RESERVED_WORD>  else  </RESERVED_WORD>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  nextblock  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  losecheck  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  roundcount  </IDENTIFIER>                  
                <SYMBOL>  ++  </SYMBOL>                
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  srand  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <routineCall>
                            <IDENTIFIER>  time  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <letStatement>
                  <IDENTIFIER>  nextblock  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <routineCall>
                        <IDENTIFIER>  rand  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                  </term>
                  <SYMBOL>  %  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                  <SYMBOL>  +  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  4  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  5  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  6  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  block  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  7  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  10  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  count  </IDENTIFIER>                      
                    <SYMBOL>  ++  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  check  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  control  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  modetime  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  count  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <doStatement>
                        <routineCall>
                            <IDENTIFIER>  drop  </IDENTIFIER>                            
                          <SYMBOL>  (  </SYMBOL>                          
                          <expressionList>
                          </expressionList>
                          <SYMBOL>  )  </SYMBOL>                          
                        </routineCall>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </doStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  drop  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  dropjudge  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  19  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  9  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <SYMBOL>  -  </SYMBOL>                            
                            <term>
                              <INT_CONST>  1  </INT_CONST>                              
                            </term>
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  del  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dropjudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  round  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  18  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dropjudge  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  dropjudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                          <SYMBOL>  ||  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
            <RESERVED_WORD>  else  </RESERVED_WORD>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  19  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  2  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  +  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  3  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  del  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  show  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  round  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  del  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  l  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  k  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  4  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  5  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  6  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  7  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  8  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &amp;&amp;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  !=  </SYMBOL>                      
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  score  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                        <INT_CONST>  100  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  j  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <statements>
                  <forStatement>
                    <RESERVED_WORD>  for  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  9  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                      <SYMBOL>  &lt;  </SYMBOL>                      
                      <term>
                        <SYMBOL>  -  </SYMBOL>                        
                        <term>
                          <INT_CONST>  1  </INT_CONST>                          
                        </term>
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                        <SYMBOL>  --  </SYMBOL>                        
                        <SYMBOL>  )  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  k  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &lt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  l  </IDENTIFIER>                              
                            <SYMBOL>  --  </SYMBOL>                            
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  l  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  l  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </forStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  check  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  amovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  dmovecheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  amovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  amovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  8  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  board  </IDENTIFIER>                              
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                            <SYMBOL>  [  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  j  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ]  </SYMBOL>                            
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  dmovecheck  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <statements>
                          <RESERVED_WORD>  break  </RESERVED_WORD>                          
                          <SYMBOL>  ;  </SYMBOL>                          
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  2  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  i  </IDENTIFIER>                          
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  dmovecheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  jturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  kturn  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  t  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <doStatement>
            <routineCall>
                <IDENTIFIER>  scan  </IDENTIFIER>                
              <SYMBOL>  (  </SYMBOL>              
              <expressionList>
              </expressionList>
              <SYMBOL>  )  </SYMBOL>              
            </routineCall>
            <SYMBOL>  ;  </SYMBOL>            
          </doStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  t  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  t  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  9  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  turncheck  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  turncheck  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  3  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  t  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  -  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  t  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  +  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  scan  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  turncheck  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  temp  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  10  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  o  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  point  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  temp  </IDENTIFIER>                          
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  temp  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                            <INT_CONST>  1  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  current  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <variableDecl>
          <RESERVED_WORD>  int  </RESERVED_WORD>          
          <IDENTIFIER>  i  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  j  </IDENTIFIER>          
          <SYMBOL>  ,  </SYMBOL>          
          <IDENTIFIER>  k  </IDENTIFIER>          
          <SYMBOL>  ;  </SYMBOL>          
        </variableDecl>
        <statements>
          <letStatement>
              <IDENTIFIER>  min  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  20  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <letStatement>
              <IDENTIFIER>  currentflag  </IDENTIFIER>              
            <SYMBOL>  =  </SYMBOL>            
            <expression>
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
          </letStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  j  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &gt;  </SYMBOL>              
              <term>
                <INT_CONST>  10  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                <SYMBOL>  ++  </SYMBOL>                
                  <IDENTIFIER>  j  </IDENTIFIER>                  
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  currentflag  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &gt;  </SYMBOL>                  
                  <term>
                    <INT_CONST>  20  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                    <SYMBOL>  ++  </SYMBOL>                    
                      <IDENTIFIER>  i  </IDENTIFIER>                      
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                      <SYMBOL>  ||  </SYMBOL>                      
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <forStatement>
                        <RESERVED_WORD>  for  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <statements>
                          <letStatement>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  =  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  0  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  ;  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <expression>
                          <term>
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  &gt;  </SYMBOL>                          
                          <term>
                            <INT_CONST>  20  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                        <statements>
                          <letStatement>
                            <SYMBOL>  ++  </SYMBOL>                            
                              <IDENTIFIER>  k  </IDENTIFIER>                              
                            <SYMBOL>  )  </SYMBOL>                            
                          </letStatement>
                        </statements>
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                  <IDENTIFIER>  board  </IDENTIFIER>                                  
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                                <SYMBOL>  [  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  j  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ]  </SYMBOL>                                
                              </term>
                              <SYMBOL>  ==  </SYMBOL>                              
                              <term>
                                <INT_CONST>  1  </INT_CONST>                                
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  currentflag  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <statements>
                              <ifStatement>
                                <RESERVED_WORD>  if  </RESERVED_WORD>                                
                                <SYMBOL>  (  </SYMBOL>                                
                                <expression>
                                  <term>
                                      <IDENTIFIER>  k  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                    <INT_CONST>  1  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  &gt;  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  )  </SYMBOL>                                
                                <SYMBOL>  {  </SYMBOL>                                
                                <statements>
                                  <letStatement>
                                      <IDENTIFIER>  min  </IDENTIFIER>                                      
                                    <SYMBOL>  =  </SYMBOL>                                    
                                    <expression>
                                      <term>
                                          <IDENTIFIER>  k  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                          <IDENTIFIER>  i  </IDENTIFIER>                                          
                                      </term>
                                      <SYMBOL>  -  </SYMBOL>                                      
                                      <term>
                                        <INT_CONST>  1  </INT_CONST>                                        
                                      </term>
                                    </expression>
                                    <SYMBOL>  ;  </SYMBOL>                                    
                                  </letStatement>
                                </statements>
                                <SYMBOL>  }  </SYMBOL>                                
                              </ifStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </forStatement>
                    </statements>
                    <statements>
                      <ifStatement>
                        <RESERVED_WORD>  if  </RESERVED_WORD>                        
                        <SYMBOL>  (  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  currentflag  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  ==  </SYMBOL>                          
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  )  </SYMBOL>                        
                        <SYMBOL>  {  </SYMBOL>                        
                        <statements>
                          <ifStatement>
                            <RESERVED_WORD>  if  </RESERVED_WORD>                            
                            <SYMBOL>  (  </SYMBOL>                            
                            <expression>
                              <term>
                                <INT_CONST>  19  </INT_CONST>                                
                              </term>
                              <SYMBOL>  -  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  i  </IDENTIFIER>                                  
                              </term>
                              <SYMBOL>  &gt;  </SYMBOL>                              
                              <term>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                              </term>
                            </expression>
                            <SYMBOL>  )  </SYMBOL>                            
                            <SYMBOL>  {  </SYMBOL>                            
                            <statements>
                              <letStatement>
                                  <IDENTIFIER>  min  </IDENTIFIER>                                  
                                <SYMBOL>  =  </SYMBOL>                                
                                <expression>
                                  <term>
                                    <INT_CONST>  19  </INT_CONST>                                    
                                  </term>
                                  <SYMBOL>  -  </SYMBOL>                                  
                                  <term>
                                      <IDENTIFIER>  i  </IDENTIFIER>                                      
                                  </term>
                                </expression>
                                <SYMBOL>  ;  </SYMBOL>                                
                              </letStatement>
                            </statements>
                            <SYMBOL>  }  </SYMBOL>                            
                          </ifStatement>
                        </statements>
                        <SYMBOL>  }  </SYMBOL>                        
                      </ifStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <statements>
          <forStatement>
            <RESERVED_WORD>  for  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  =  </SYMBOL>                
                <expression>
                  <term>
                    <INT_CONST>  19  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
              </letStatement>
            </statements>
            <expression>
              <term>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
              </term>
              <SYMBOL>  &lt;  </SYMBOL>              
              <term>
                <SYMBOL>  -  </SYMBOL>                
                <term>
                  <INT_CONST>  1  </INT_CONST>                  
                </term>
              </term>
            </expression>
            <SYMBOL>  ;  </SYMBOL>            
            <statements>
              <letStatement>
                  <IDENTIFIER>  i  </IDENTIFIER>                  
                <SYMBOL>  --  </SYMBOL>                
                <SYMBOL>  )  </SYMBOL>                
              </letStatement>
            </statements>
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <forStatement>
                <RESERVED_WORD>  for  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  9  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <expression>
                  <term>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  &lt;  </SYMBOL>                  
                  <term>
                    <SYMBOL>  -  </SYMBOL>                    
                    <term>
                      <INT_CONST>  1  </INT_CONST>                      
                    </term>
                  </term>
                </expression>
                <SYMBOL>  ;  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  j  </IDENTIFIER>                      
                    <SYMBOL>  --  </SYMBOL>                    
                    <SYMBOL>  )  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  2  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  2  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <statements>
                  <ifStatement>
                    <RESERVED_WORD>  if  </RESERVED_WORD>                    
                    <SYMBOL>  (  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                      </term>
                      <SYMBOL>  ==  </SYMBOL>                      
                      <term>
                        <INT_CONST>  3  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  )  </SYMBOL>                    
                    <SYMBOL>  {  </SYMBOL>                    
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <statements>
                      <letStatement>
                          <IDENTIFIER>  board  </IDENTIFIER>                          
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  i  </IDENTIFIER>                              
                          </term>
                          <SYMBOL>  +  </SYMBOL>                          
                          <term>
                              <IDENTIFIER>  min  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  [  </SYMBOL>                        
                        <expression>
                          <term>
                              <IDENTIFIER>  j  </IDENTIFIER>                              
                          </term>
                        </expression>
                        <SYMBOL>  ]  </SYMBOL>                        
                        <SYMBOL>  =  </SYMBOL>                        
                        <expression>
                          <term>
                            <INT_CONST>  3  </INT_CONST>                            
                          </term>
                        </expression>
                        <SYMBOL>  ;  </SYMBOL>                        
                      </letStatement>
                    </statements>
                    <SYMBOL>  }  </SYMBOL>                    
                  </ifStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </forStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </forStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
  <globalDeclaration>
    <FunctionDecl>
      <RESERVED_WORD>  void  </RESERVED_WORD>      
      <IDENTIFIER>  losecheck  </IDENTIFIER>      
      <SYMBOL>  (  </SYMBOL>      
      <SYMBOL>  )  </SYMBOL>      
      <bodyDecl>
        <SYMBOL>  {  </SYMBOL>        
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  1  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  2  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  3  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  4  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  5  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  6  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  7  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  block  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  7  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  4  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  5  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                  <SYMBOL>  ||  </SYMBOL>                  
                  <term>
                      <IDENTIFIER>  board  </IDENTIFIER>                      
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  1  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                    <SYMBOL>  [  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  6  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ]  </SYMBOL>                    
                  </term>
                  <SYMBOL>  !=  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <letStatement>
                      <IDENTIFIER>  gamejudge  </IDENTIFIER>                      
                    <SYMBOL>  =  </SYMBOL>                    
                    <expression>
                      <term>
                        <INT_CONST>  0  </INT_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </letStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <statements>
          <ifStatement>
            <RESERVED_WORD>  if  </RESERVED_WORD>            
            <SYMBOL>  (  </SYMBOL>            
            <expression>
              <term>
                  <IDENTIFIER>  gamejudge  </IDENTIFIER>                  
              </term>
              <SYMBOL>  ==  </SYMBOL>              
              <term>
                <INT_CONST>  0  </INT_CONST>                
              </term>
            </expression>
            <SYMBOL>  )  </SYMBOL>            
            <SYMBOL>  {  </SYMBOL>            
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  system  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "cls"  </STRING_CONST>                        
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  printf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "                            Game Over\n\n                             Score:%d\n\n                   输入0结束游戏，输入1重新开始\n"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                          <IDENTIFIER>  score  </IDENTIFIER>                          
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <doStatement>
                <routineCall>
                    <IDENTIFIER>  scanf  </IDENTIFIER>                    
                  <SYMBOL>  (  </SYMBOL>                  
                  <expressionList>
                    <expression>
                      <term>
                        <STRING_CONST>  "%d"  </STRING_CONST>                        
                      </term>
                    </expression>
                    <SYMBOL>  ,  </SYMBOL>                    
                    <expression>
                      <term>
                        <SYMBOL>  &amp;  </SYMBOL>                        
                        <term>
                            <IDENTIFIER>  conti  </IDENTIFIER>                            
                        </term>
                      </term>
                    </expression>
                  </expressionList>
                  <SYMBOL>  )  </SYMBOL>                  
                </routineCall>
                <SYMBOL>  ;  </SYMBOL>                
              </doStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  0  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  exit  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <INT_CONST>  0  </INT_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <statements>
              <ifStatement>
                <RESERVED_WORD>  if  </RESERVED_WORD>                
                <SYMBOL>  (  </SYMBOL>                
                <expression>
                  <term>
                      <IDENTIFIER>  conti  </IDENTIFIER>                      
                  </term>
                  <SYMBOL>  ==  </SYMBOL>                  
                  <term>
                    <INT_CONST>  1  </INT_CONST>                    
                  </term>
                </expression>
                <SYMBOL>  )  </SYMBOL>                
                <SYMBOL>  {  </SYMBOL>                
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  system  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                        <expression>
                          <term>
                            <STRING_CONST>  "cls"  </STRING_CONST>                            
                          </term>
                        </expression>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <statements>
                  <doStatement>
                    <routineCall>
                        <IDENTIFIER>  main  </IDENTIFIER>                        
                      <SYMBOL>  (  </SYMBOL>                      
                      <expressionList>
                      </expressionList>
                      <SYMBOL>  )  </SYMBOL>                      
                    </routineCall>
                    <SYMBOL>  ;  </SYMBOL>                    
                  </doStatement>
                </statements>
                <SYMBOL>  }  </SYMBOL>                
              </ifStatement>
            </statements>
            <SYMBOL>  }  </SYMBOL>            
          </ifStatement>
        </statements>
        <SYMBOL>  }  </SYMBOL>        
      </bodyDecl>
    </FunctionDecl>
  </globalDeclaration>
</program>